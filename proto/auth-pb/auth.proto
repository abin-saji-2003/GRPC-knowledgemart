syntax = "proto3";

package auth;

option go_package = "proto/auth-pb";

service AuthService {
  rpc EmailSignup (EmailSignupRequest) returns (EmailSignupResponse);
  rpc EmailLogin (EmailLoginRequest) returns (EmailLoginResponse);
  rpc VerifyEmail (VerifyEmailRequest) returns (VerifyEmailResponse);
  rpc ResendOTP (ResendOTPRequest) returns (ResendOTPResponse);
  rpc SellerRegister (SellerRegisterRequest) returns (SellerRegisterResponse);
  rpc SellerLogin (SellerLoginRequest) returns (SellerLoginResponse);
  rpc AdminLogin (AdminLoginRequest) returns (AdminLoginResponse);
  rpc ValidateToken (ValidateTokenRequest) returns (ValidateTokenResponse); // ✅ Added for JWT authentication
}

// Signup Request & Response
message EmailSignupRequest {
  string name = 1;
  string email = 2;
  string phone_number = 3;
  string password = 4;
  string confirm_password = 5;
}

message EmailSignupResponse {
  string message = 1;
  bool success = 2;
}

// Login Request & Response
message EmailLoginRequest {
  string email = 1;
  string password = 2;
}

message EmailLoginResponse {
  string token = 1; // ✅ JWT Token after successful login
  bool success = 2;
  UserResponse user = 3; // ✅ User details after login
}

// Verify Email
message VerifyEmailRequest {
  string email = 1;
  uint64 otp = 2;
}

message VerifyEmailResponse {
  string message = 1;
  bool success = 2;
}

// Resend OTP
message ResendOTPRequest {
  string email = 1;
}

message ResendOTPResponse {
  string message = 1;
  bool success = 2;
}

// Seller Register
message SellerRegisterRequest {
  uint32 user_id = 1; // ✅ Added to link seller with user
  string name = 2;
  string password = 3;
  string description = 4;
}

message SellerRegisterResponse {
  string message = 1;
  bool success = 2;
}

// Seller Login
message SellerLoginRequest {
  uint32 user_id = 1;
  string username = 2;
  string password = 3;
}

message SellerLoginResponse {
  string token = 1; // ✅ JWT Token after successful seller login
  bool success = 2;
  SellerResponse seller = 3; // ✅ Seller details after login
}

// Admin Login
message AdminLoginRequest {
  string email = 1;
  string password = 2;
}

message AdminLoginResponse {
  string token = 1; // ✅ JWT Token after successful admin login
  bool success = 2;
}

// ✅ JWT Token Validation
message ValidateTokenRequest {
  string token = 1; // Token to be validated
}

message ValidateTokenResponse {
  bool valid = 1;    // True if token is valid, false otherwise
  string user_id = 2; // Extracted User ID from token
  string role = 3;    // Extracted Role from token (e.g., "user", "seller", "admin")
}

// User Response (Only for login)
message UserResponse {
  uint32 id = 1;
  string name = 2;
  string email = 3;
  string phone_number = 4;
  string picture = 5;
  bool blocked = 6;
  bool verified = 7;
}

// Seller Response (Only for login)
message SellerResponse {
  uint32 id = 1;
  uint32 user_id = 2;
  string name = 3;
  string description = 4;
  bool verified = 5;
  double seller_rating = 6; // ✅ Changed to snake_case for consistency
}
